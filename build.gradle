/*
 * Copyright (c) 2018-2020 Karlatemp. All rights reserved.
 * @author Karlatemp <karlatemp@vip.qq.com> <https://github.com/Karlatemp>
 * @create 2020/11/13 19:41:01
 *
 * caller/build.gradle
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'io.github.karlatemp.publication-sign' version '1.0.0'
    id("maven-publish")
}

publicationSign {
    setupWorkflow { workflow ->
        workflow.fastSetup("keys/key.pub", "keys/key.pri")
    }
}

allprojects {
    group 'io.github.karlatemp'
    version '1.1.1'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

dependencies {
    compile project(':caller-api')
    compile project(':caller-java8')
    compile project(':caller-java9')
    compile project(':caller-java10')
    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile "org.jetbrains.kotlin:kotlin-reflect"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit5"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10
}

def proj = project

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
}

subprojects {
    afterEvaluate {
        rootProject.tasks.sourcesJar { Jar task ->
            task.from sourceSets.main.allSource
        }
    }
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.whenTaskAdded { task ->
    if (task instanceof GenerateModuleMetadata) {
        task.enabled = false
    }
}

publishing {
    repositories {
        try {
            property('sonatype.user')
            property('sonatype.key')

            maven { MavenArtifactRepository repo ->
                repo.name = "MavenCentral"

                repo.setUrl('https://oss.sonatype.org/service/local/staging/deploy/maven2')

                repo.credentials {
                    username(property('sonatype.user'))
                    password(property('sonatype.key'))
                }
            }
        } catch (MissingPropertyException ignored) {
        }
    }

    publications {
        register("mavenPublication", MavenPublication.class) {
            it.groupId(proj.group.toString())
            it.artifactId(proj.name)
            it.artifact jar
            it.artifact sourcesJar
            it.artifact javadocJar
            it.pom { pom ->
                name = 'Caller Finder'
                description = 'Caller Finder'
                url = 'https://github.com/Karlatemp/caller'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://spdx.org/licenses/MIT.html'
                    }
                }
                pom.scm {
                    url.set('https://github.com/Karlatemp/caller')
                    connection.set('scm:https://github.com/Karlatemp/caller.git')
                    developerConnection.set('scm:git://github.com/Karlatemp/caller.git')
                }

                pom.developers {
                    developer {
                        id.set('Karlatemp')
                        name.set('Karlatemp')
                        email.set('karlatemp@vip.qq.com')
                    }
                }
            }
        }
    }
}
